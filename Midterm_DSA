// create a c++ program Bank membership that stores:
// data information of client
// store transactions in credit with fee
// debit for tranasactions

// at least 3 data struct
// 3 nodes
// 3 linked list possible mag 4 because of the problem 
// crud
// do not use class and expose it as struct

//each clients can possibly have multiple accounts 
//add status withdraw or deposit, place in struct
//node within a node


#include <iostream>
#include <string>
using namespace std;

struct Debit {
    int transactionID = 0;
    int amount = 0;
    string time = "";
    string date = "";
    string purpose = "";
    Debit* next = nullptr;
};

struct Credit {
    int transactionID = 0;
    int amount = 0;
    string time = "";
    string date = "";
    string purpose = "";
    Credit* next = nullptr;
};

struct Account {
    int accountNumber = 0;
    double balance = 0.0;
    Credit* creditHead = nullptr;
    Debit* debitHead = nullptr;
    Account* next = nullptr;
};

struct Client {
    string fName = "";
    string mName = "";
    string lName = "";
    string YearofBirth = "";
    string accountNumber = "";
    Account* accountHead = nullptr;
    Client* next = nullptr;
};

// Global client linked list head pointer
Client* clientHead = nullptr;

// Helper function to insert string data
void InsertData(string& data, const string& output) {
    cout << output;
    cin.ignore();
    getline(cin, data);
}

// Create a new client
void CreateClient() {
    Client* newClient = new Client;
    cout << "Enter first name: ";
    cin >> newClient->fName;
    cin.ignore(); // Clearing input buffer
    cout << "Enter middle name: ";
    cin >> newClient->mName;
    cin.ignore(); // Clearing input buffer
    cout << "Enter last name: ";
    cin >> newClient->lName;
    cin.ignore(); // Clearing input buffer
    cout << "Enter Year of Birth: ";
    cin >> newClient->YearofBirth;
    cin.ignore(); // Clearing input buffer
    cout << "Enter account number (12 digits): ";
    cin >> newClient->accountNumber;
    while (newClient->accountNumber.length() != 12) {
        cout << "Invalid account number. Please enter a 12-digit account number: ";
        cin >> newClient->accountNumber;
    }
    newClient->next = clientHead;
    clientHead = newClient;
    cout << "Client created successfully.\n";
}

// Add a new account to an existing client
void AddAccountToClient(string clientName, string clientAccountNumber) {
    Client* tempClient = clientHead;
    bool found = false;
    while (tempClient != nullptr) {
        if (tempClient->fName == clientName && tempClient->accountNumber == clientAccountNumber) {
            Account* newAccount = new Account;
            cout << "Enter account number for the new account: ";
            cin >> newAccount->accountNumber;
            newAccount->balance = 0.0;
            newAccount->next = tempClient->accountHead;
            tempClient->accountHead = newAccount;
            cout << "Account added successfully to client.\n";
            found = true;
            break;
        }
        tempClient = tempClient->next;
    }
    if (!found) {
        cout << "Client not found with given name and account number.\n";
    }
}

// Add a transaction to an account
void AddTransactionToAccount(Account* account, const string& type) {
    if (type == "credit") {
        Credit* newCredit = new Credit;
        cout << "Enter transaction ID: ";
        cin >> newCredit->transactionID;
        cout << "Enter amount: ";
        cin >> newCredit->amount;
        cout << "Enter time: ";
        cin >> newCredit->time;
        cout << "Enter date: ";
        cin >> newCredit->date;
        cout << "Enter purpose: ";
        cin >> newCredit->purpose;
        newCredit->next = account->creditHead;
        account->creditHead = newCredit;
        account->balance += newCredit->amount;
        cout << "Credit transaction added successfully.\n";
    }
    else if (type == "debit") {
        Debit* newDebit = new Debit;
        cout << "Enter transaction ID: ";
        cin >> newDebit->transactionID;
        cout << "Enter amount: ";
        cin >> newDebit->amount;
        cout << "Enter time: ";
        cin >> newDebit->time;
        cout << "Enter date: ";
        cin >> newDebit->date;
        cout << "Enter purpose: ";
        cin >> newDebit->purpose;
        newDebit->next = account->debitHead;
        account->debitHead = newDebit;
        account->balance -= newDebit->amount;
        cout << "Debit transaction added successfully.\n";
    }
    else {
        cout << "Invalid transaction type.\n";
    }
}

// Display all clients and their accounts with a number count
void DisplayClients() {
    Client* tempClient = clientHead;
    int count = 1;
    while (tempClient != nullptr) {
        cout << "Client " << count++ << ":\n";
        cout << "  Name: " << tempClient->fName << " " << tempClient->mName << " " << tempClient->lName << endl;
        cout << "  Year of Birth: " << tempClient->YearofBirth << endl;
        cout << "  Account Number: " << tempClient->accountNumber << endl;
        Account* tempAccount = tempClient->accountHead;
        while (tempAccount != nullptr) {
            cout << "    Account Number: " << tempAccount->accountNumber << endl;
            cout << "    Balance: " << tempAccount->balance << endl;
            Credit* tempCredit = tempAccount->creditHead;
            while (tempCredit != nullptr) {
                cout << "      Credit Transaction ID: " << tempCredit->transactionID << endl;
                cout << "      Amount: " << tempCredit->amount << endl;
                cout << "      Date: " << tempCredit->date << endl;
                tempCredit = tempCredit->next;
            }
            Debit* tempDebit = tempAccount->debitHead;
            while (tempDebit != nullptr) {
                cout << "      Debit Transaction ID: " << tempDebit->transactionID << endl;
                cout << "      Amount: " << tempDebit->amount << endl;
                cout << "      Date: " << tempDebit->date << endl;
                tempDebit = tempDebit->next;
            }
            tempAccount = tempAccount->next;
        }
        tempClient = tempClient->next;
    }
}

// Main menu for the bank system
void RunBankSystem() {
    int choice;
    while (true) {  // Ensure the menu keeps looping unless choice is 0
        cout << "=======================================================\n";
        cout << "|              BANK MANAGEMENT SYSTEM                 |\n";
        cout << "=======================================================\n";
        cout << "| 1. Create Client                                    |\n";
        cout << "| 2. Display Clients                                  |\n";
        cout << "| 3. Add Account to Client                            |\n";
        cout << "| 4. Add Transaction to Account                       |\n";
        cout << "| 0. Exit                                             |\n";
        cout << "=======================================================\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore();  // Clear the input buffer
        if (choice == 1) {
            CreateClient();  // Create a new client
        }
        else if (choice == 2) {
            DisplayClients();  // Display all clients and their accounts
        }
        else if (choice == 3) {
            if (clientHead == nullptr) {
                cout << "No clients available. Please create a client first.\n";
                continue;
            }
            cout << "Enter client first name: ";
            string clientName;
            getline(cin, clientName);
            cout << "Enter client account number: ";
            string clientAccountNumber;
            getline(cin, clientAccountNumber);
            AddAccountToClient(clientName, clientAccountNumber);  // Add an account to the found client
        }
        else if (choice == 4) {
            // Transaction logic (similar to adding accounts)
        }
        else if (choice == 0) {
            cout << "Exiting the system...\n";
            break;  // Exit the loop
        }
        else {
            cout << "Invalid choice. Please try again.\n";
        }
    }
}

int main() {
    RunBankSystem();  // Start the bank system
    return 0;
}
