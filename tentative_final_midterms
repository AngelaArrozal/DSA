// create a c++ program Bank membership that stores:
// data information of client
// store transactions in credit with fee
// debit for tranasactions

// at least 3 data struct
// 3 nodes
// 3 linked list possible mag 4 because of the problem 
// crud
// do not use class and expose it as struct

//each clients can possibly have multiple accounts 
//add status withdraw or deposit, place in struct
//node within a node

#include <iostream>
#include <string>

using namespace std;

struct Debit {
    int transactionID = 0;
    int amount = 0;
    string time = "";
    string date = "";
    string purpose = "";
    Debit* next = nullptr;
};

struct Credit {
    int transactionID = 0;
    int amount = 0;
    string time = "";
    string date = "";
    string purpose = "";
    Credit* next = nullptr;
};

struct Account {
    int accountNumber = 0;
    double balance = 0.0;
    Credit* creditHead = nullptr;
    Debit* debitHead = nullptr;
    Account* next = nullptr;
};

struct Client {
    string fName = "";
    string mName = "";
    string lName = "";
    string YearofBirth = "";
    string accountNumber = "";
    Account* accountHead = nullptr;
    Client* next = nullptr;
};


// Functions
Client* InitializeClientList();
void CreateClient(Client*& clientHead, int& clientCount);
void DisplayClients(Client* clientHead, int clientCount);
void AddAccountToClient(Client* clientHead, int clientCount);
void AddTransactionToAccount(Client* clientHead, int clientCount);
void UpdateClientInformation(Client* clientHead, int clientCount, const string& accNumber);
void DeleteClient(Client*& clientHead, int& clientCount, const string& accNumber);
void DeleteAccountUnderClient(Client* clientHead, int clientCount, const string& clientName, const string& accountNumber);
void RunBankSystem();
bool isValidAccountNumber(const string& accountNumber);
int FindClientByAccountNumber(Client* clientHead, int clientCount, const string& accNumber);

Client* InitializeClientList() {
    return nullptr;

// Main function
int main() {
        Client* clientHead = InitializeClientList();
        RunBankSystem(clientHead);
        return 0;
}

int FindClientByAccountNumber(Client* clientHead, int clientCount, const string& accNumber) {
    Client* tempClient = clientHead;
    int index = 0;
    while (tempClient != nullptr) {
        if (tempClient->accountNumber == accNumber) {
            return index;
        }
        tempClient = tempClient->next;
        index++;
    }
    return -1; // Not found
}
//function declration 
bool isValidAccountNumber(const string& accountNumber) {
    if (accountNumber.length() != 9) { // set the limit to 9 only 
        return false;
    }

    for (char const& digit : accountNumber) { //starts a loop that passes through each 'digit' in the account number
        if (!isdigit(digit)) {
            return false; //returns false when invalid
        }
    }
    return true; //return true if correct
}



// Function to create a client
void CreateClient(Client*& clientHead, int& clientCount) {
    Client* newClient = new Client;
    cout << "Enter first name: ";
    getline(cin, newClient->fName);
    cout << "Enter middle name: ";
    getline(cin, newClient->mName);
    cout << "Enter last name: ";
    getline(cin, newClient->lName);
    cout << "Enter Year of Birth: ";
    getline(cin, newClient->YearofBirth);
    cout << "Enter account number (9 digits): ";
    getline(cin, newClient->accountNumber);

    while (!isValidAccountNumber(newClient->accountNumber)) {
        cout << "Invalid account number. Please enter a valid 9-digit account number: ";
        getline(cin, newClient->accountNumber);
    }

    newClient->next = clientHead;
    clientHead = newClient;
    clientCount++;
    cout << "Client created successfully.\n";
}

void DisplayClients(Client* clientHead, int clientCount) {
    if (clientCount == 0) {
        cout << "No clients to display.\n";
        return;
    }
    Client* tempClient = clientHead;
    int clientNumber = 1;  // To keep track of client numbering
    cout << "=======================================================\n";
    cout << "|                       CLIENTS                       |\n";
    cout << "=======================================================\n";
    while (tempClient != nullptr) {
        cout << "Client #" << clientNumber++ << ":\n";
        cout << "  Name: " << tempClient->fName << " " << tempClient->mName << " " << tempClient->lName << "\n";
        cout << "  Year of Birth: " << tempClient->YearofBirth << "\n";
        cout << "  Account Number: " << tempClient->accountNumber << "\n";
        cout << "-------------------------------------------------------\n";
        tempClient = tempClient->next;
    }
    cout << "=======================================================\n";
}

void AddAccountToClient(Client* clientHead, int clientCount) {
    if (clientHead == nullptr) {
        cout << "No clients available. Please create a client first.\n";
        return;
    }

    // Prompt user to enter client account number
    cout << "Enter client account number to add an account: ";
    string clientAccountNumber;
    getline(cin, clientAccountNumber);

    // Find the client with the given account number
    Client* tempClient = clientHead;
    while (tempClient != nullptr && tempClient->accountNumber != clientAccountNumber) {
        tempClient = tempClient->next;
    }

    // If client is not found, exit the function
    if (tempClient == nullptr) {
        cout << "Client not found.\n";
        return;
    }

    // Ask for the new account number
    cout << "Enter new account number (9 digits): ";
    string newAccountNumber;
    getline(cin, newAccountNumber);

    // Initialize newAccountNum with a valid value after the validation
    if (!isValidAccountNumber(newAccountNumber)) {
        cout << "Invalid account number.\n";
        return;
    }

    // Convert the string account number to an integer
    int newAccountNum = stoi(newAccountNumber);

    // Check if the account already exists for the client
    Account* tempAccount = tempClient->accountHead;
    while (tempAccount != nullptr) {
        if (tempAccount->accountNumber == newAccountNum) {
            cout << "Account already exists with this number.\n";
            return;
        }
        tempAccount = tempAccount->next;
    }

    // If account doesn't exist, create a new account and add it to the client's account list
    Account* newAccount = new Account;
    newAccount->accountNumber = newAccountNum;
    newAccount->balance = 0.0;
    newAccount->next = tempClient->accountHead;
    tempClient->accountHead = newAccount;

    // Success message
    cout << "Account added successfully.\n";
}

void AddTransactionToAccount(Client* clientHead, int clientCount) {
    if (clientHead == nullptr) {
        cout << "No clients available. Please create a client first.\n";
        return;
    }
    cout << "Enter client account number: ";
    string clientAccountNumber;
    getline(cin, clientAccountNumber);

    Client* tempClient = clientHead;
    while (tempClient != nullptr && tempClient->accountNumber != clientAccountNumber) {
        tempClient = tempClient->next;
    }

    if (tempClient == nullptr) {
        cout << "Client not found.\n";
        return;
    }

    cout << "Enter account number to add a transaction: ";
    int accountNumber;
    cin >> accountNumber;
    cin.ignore();

    Account* tempAccount = tempClient->accountHead;
    while (tempAccount != nullptr && tempAccount->accountNumber != accountNumber) {
        tempAccount = tempAccount->next;
    }

    if (tempAccount == nullptr) {
        cout << "Account not found.\n";
        return;
    }

    cout << "Enter transaction type (1 for Credit - Deposit, 2 for Debit - Withdraw): ";
    int transactionType;
    cin >> transactionType;
    cin.ignore();

    int transactionID, amount;
    string time, date, purpose;
    cout << "Enter transaction ID: ";
    cin >> transactionID;
    cin.ignore();
    cout << "Enter amount: ";
    cin >> amount;
    cin.ignore();
    cout << "Enter time (HH:MM): ";
    getline(cin, time);
    cout << "Enter date (DD/MM/YYYY): ";
    getline(cin, date);
    cout << "Enter purpose: ";
    getline(cin, purpose);

    double withdrawalFee = 50.0;

    if (transactionType == 1) {  // Credit for deposit
        Credit* newCredit = new Credit;
        newCredit->transactionID = transactionID;
        newCredit->amount = amount;
        newCredit->time = time;
        newCredit->date = date;
        newCredit->purpose = purpose;
        newCredit->next = tempAccount->creditHead;
        tempAccount->creditHead = newCredit;
        tempAccount->balance += amount;
        cout << "Deposit of " << amount << " added successfully. New Balance: " << tempAccount->balance << endl;
    }
    else if (transactionType == 2) {  // Debit for withdraw
        double totalWithdrawalAmount = amount + withdrawalFee;
        if (tempAccount->balance >= totalWithdrawalAmount) {
            Debit* newDebit = new Debit;
            newDebit->transactionID = transactionID;
            newDebit->amount = amount;
            newDebit->time = time;
            newDebit->date = date;
            newDebit->purpose = purpose;
            newDebit->next = tempAccount->debitHead;
            tempAccount->debitHead = newDebit;
            tempAccount->balance -= totalWithdrawalAmount;
            cout << "Withdrawal of " << amount << " added successfully. New Balance: " << tempAccount->balance << endl;
        }
        else {
            cout << "Insufficient balance for the withdrawal.\n";
        }
    }
    else {
        cout << "Invalid transaction type.\n";
    }
}

void UpdateClientInformation(Client* clientHead, int clientCount, const string& accNumber) {
    Client* tempClient = clientHead;
    while (tempClient != nullptr && tempClient->accountNumber != accNumber) {
        tempClient = tempClient->next;
    }

    if (tempClient == nullptr) {
        cout << "Client not found.\n";
        return;
    }

    cout << "Updating client information for " << tempClient->fName << " " << tempClient->lName << "\n";
    cout << "Enter new first name: ";
    getline(cin, tempClient->fName);
    cout << "Enter new middle name: ";
    getline(cin, tempClient->mName);
    cout << "Enter new last name: ";
    getline(cin, tempClient->lName);
    cout << "Enter new year of birth: ";
    getline(cin, tempClient->YearofBirth);

    cout << "Client information updated successfully.\n";
}

void DeleteClient(Client*& clientHead, int& clientCount, const string& accNumber) {
    Client* tempClient = clientHead;
    Client* prevClient = nullptr;

    while (tempClient != nullptr && tempClient->accountNumber != accNumber) {
        prevClient = tempClient;
        tempClient = tempClient->next;
    }

    if (tempClient == nullptr) {
        cout << "Client not found.\n";
        return;
    }

    if (prevClient == nullptr) {
        clientHead = tempClient->next;  
    }
    else {
        prevClient->next = tempClient->next;
    }

    delete tempClient;
    clientCount--;
    cout << "Client deleted successfully.\n";
}

void DeleteAccountUnderClient(Client* clientHead, int clientCount, const string& clientAccountNumber, const string& accountNumber) {
    Client* tempClient = clientHead;
    while (tempClient != nullptr && tempClient->accountNumber != clientAccountNumber) {
        tempClient = tempClient->next;
    }

    if (tempClient == nullptr) {
        cout << "Client not found.\n";
        return;
    }

    Account* tempAccount = tempClient->accountHead;
    Account* prevAccount = nullptr;

    while (tempAccount != nullptr && to_string(tempAccount->accountNumber) != accountNumber) {
        prevAccount = tempAccount;
        tempAccount = tempAccount->next;
    }

    if (tempAccount == nullptr) {
        cout << "Account not found.\n";
        return;
    }

    if (prevAccount == nullptr) {
        tempClient->accountHead = tempAccount->next;  // Account is the head
    }
    else {
        prevAccount->next = tempAccount->next;
    }

    delete tempAccount;
    cout << "Account deleted successfully.\n";
}

void RunBankSystem(Client*& clientHead) {
    int clientCount = 0;  // Initialize clientCount here
    bool running = true;
    int choice;

    while (running) {
        cout << "=======================================================\n";
        cout << "|              BANK MANAGEMENT SYSTEM                 |\n";
        cout << "=======================================================\n";
        cout << "| 1. Create Client                                    |\n";
        cout << "| 2. Display Clients                                  |\n";
        cout << "| 3. Add Account to Client                            |\n";
        cout << "| 4. Add Transaction to Account                       |\n";
        cout << "| 5. Update Client Information                        |\n";
        cout << "| 6. Delete Client                                    |\n";
        cout << "| 7. Delete an account under a client                 |\n";
        cout << "| 8. Exit                                             |\n";
        cout << "=======================================================\n";
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore(); // Ignore the newline character

        switch (choice) {
        case 1:
            CreateClient(clientHead, clientCount);
            break;
        case 2:
            DisplayClients(clientHead, clientCount);
            break;
        case 3:
            AddAccountToClient(clientHead, clientCount);
            break;
        case 4:
            AddTransactionToAccount(clientHead, clientCount);
            break;
        case 5: {
            cout << "Enter account number of the client to update: ";
            string accNumber;
            getline(cin, accNumber);
            UpdateClientInformation(clientHead, clientCount, accNumber);
            break;
        }
        case 6: {
            cout << "Enter account number of the client to delete: ";
            string accNumber;
            getline(cin, accNumber);
            DeleteClient(clientHead, clientCount, accNumber);
            break;
        }
        case 7: {
            cout << "Enter client account number: ";
            string clientAccountNumber;
            getline(cin, clientAccountNumber);
            cout << "Enter account number to delete: ";
            string accountNumber;
            getline(cin, accountNumber);
            DeleteAccountUnderClient(clientHead, clientCount, clientAccountNumber, accountNumber);
            break;
        }
        case 8:
            running = false;
            break;
        default:
            cout << "Invalid choice. Please try again.\n";
            break;
        }
    }
}

// Main function
int main() {
    Client* clientHead = InitializeClientList();
    RunBankSystem(clientHead);
    return 0;
}
